---
- name: Update port on which apache listens
  become: yes
  ansible.builtin.copy:
    dest: /etc/apache2/ports.conf
    group: root
    mode: "0644"
    owner: root
    src: ports.conf
  notify: Restart Apache2
- name: Disable Debian default site for Apache2
  become: yes
  ansible.builtin.file:
    path: /etc/apache2/sites-enabled/000-default.conf
    state: absent
  notify: Restart Apache2
- name: Disable CGI serving
  become: yes
  ansible.builtin.file:
    path: /etc/apache2/conf-enabled/serve-cgi-bin.conf
    state: absent
  notify: Restart Apache2
- name: Configure SSL for connection from upstream reverse proxy
  # We don't need a non SSL vhost because we are behind a reverse proxy
  # If we want auth, we also do that on the reverse proxy, not here
  become: yes
  ansible.builtin.template:
    dest: /etc/apache2/conf-available/private-ssl.conf
    group: root
    mode: "0644"
    owner: root
    src: private-ssl.conf.j2
  notify: Restart Apache2
- name: Enable SSL for connection from upstream reverse proxy
  # We don't need a non SSL vhost because we are behind a reverse proxy
  # If we want auth, we also do that on the reverse proxy, not here
  become: yes
  ansible.builtin.file:
    path: /etc/apache2/conf-enabled/private-ssl.conf
    src: /etc/apache2/conf-available/private-ssl.conf
    state: link
  notify: Restart Apache2
- name: Configure VHosts
  become: yes
  loop: "{{ websites_static }}"
  loop_control:
    label: "{{ item.fqdn }}"
  ansible.builtin.template:
    dest: /etc/apache2/sites-available/{{ item.fqdn }}.conf
    group: root
    mode: "0644"
    owner: root
    src: vhost.conf.j2
  notify: Restart Apache2
- name: Enable VHosts
  become: yes
  loop: "{{ websites_static }}"
  loop_control:
    label: "{{ item.fqdn }}"
  ansible.builtin.file:
    path: /etc/apache2/sites-enabled/{{ item.fqdn }}.conf
    src: /etc/apache2/sites-available/{{ item.fqdn }}.conf
    state: link
  notify: Restart Apache2
- name: Ensure VHost site operators exist
  become: yes
  loop: "{{ websites_static }}"
  loop_control:
    label: "{{ item.fqdn }}"
  ansible.builtin.user:
    name: "{{ item.operator }}"
    password_lock: true
    shell: /bin/bash
    state: present
- name: Ensure VHost webroots exist
  become: yes
  loop: "{{ websites_static }}"
  loop_control:
    label: "{{ item.fqdn }}"
  ansible.builtin.file:
    path: /var/www/{{ item.fqdn }}
    group: "{{ item.operator }}"
    mode: "0775"
    owner: root
    state: directory
- name: Provide a default homepage if site is empty
  become: yes
  loop: "{{ websites_static }}"
  loop_control:
    label: "{{ item.fqdn }}"
  ansible.builtin.copy:
    dest: /var/www/{{ item.fqdn }}/index.html
    force: false
    group: "{{ item.operator }}"
    mode: "0644"
    owner: "{{ item.operator }}"
    src: index.html
- name: Ensure rsync is installed
  become: yes
  ansible.builtin.apt:
    name: rsync
    state: present
- name: Setup admin access to site operator home (for rsyncd.conf)
  become: yes
  loop: "{{ websites_static }}"
  loop_control:
    label: "{{ item.fqdn }}"
  ansible.builtin.file:
    path: /home/{{ item.operator }}
    group: "{{ admin_user }}"
    mode: "0750"
    owner: "{{ item.operator }}"
    state: directory
- name: Setup admin access to site operator rsyncd.conf
  become: yes
  loop: "{{ websites_static }}"
  loop_control:
    label: "{{ item.fqdn }}"
  ansible.builtin.template:
    dest: /home/{{ item.operator }}/rsyncd.conf
    group: "{{ admin_user }}"
    mode: "0664"
    owner: root
    src: rsyncd-website.conf.j2
- name: Enable SSH (and therefore rsync)) for site operators
  become: yes
  loop: "{{ websites_static }}"
  loop_control:
    label: "{{ item.fqdn }}"
  ansible.posix.authorized_key:
    key: "{{ item.ssh_key }}"
    user: "{{ item.operator }}"
    state: present
- name: Allow HTTPS in
  become: yes
  community.general.ufw:
    rule: allow
    direction: in
    proto: tcp
    port: 443
...
