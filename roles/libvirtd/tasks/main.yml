---
- name: Install libvirtd and related packages
  become: yes
  ansible.builtin.apt:
    name:
    - dnsmasq
    - libvirt-clients
    - libvirt-daemon-system
    - qemu-system
    install_recommends: false
    update_cache: true
    state: present
- name: Ensure dnsmasq disabled except for Libvirt
  ansible.builtin.systemd:
    name: dnsmasq
    enabled: false
- name: Configure Libvirt shutdown guest handling
  become: yes
  ansible.builtin.copy:
    dest: /etc/default/libvirt-guests
    group: root
    mode: "0644"
    owner: root
    src: libvirt-guests
- name: Add/split Libvirt storage pools
  when: pool_list is defined
  become: yes
  block:
  - name: Workaround \#1 for Apparmor issue with Libvirt extra pools under images # yamllint disable-line
    ansible.builtin.copy:
      dest: /etc/apparmor.d/local/abstractions/libvirt-qemu
      content: /var/lib/libvirt/images/** rwk,
      group: root
      mode: "0644"
      owner: root
    notify: Reload apparmor
  - name: Workaround \#2 for Apparmor issue with Libvirt extra pools under images # yamllint disable-line
    ansible.builtin.template:
      dest: /etc/apparmor.d/local/libvirt.virt-aa-helper
      group: root
      mode: "0644"
      owner: root
      src: libvirt.virt-aa-helper.j2
    notify: Reload apparmor
  - name: Add storage pools
    block:
    - name: Create pool directories
      ansible.builtin.file:
        path: /var/lib/libvirt/images/{{ item }}
        group: kvm
        mode: "0770"
        owner: libvirt-qemu
        state: directory
      loop: "{{ pool_list }}"
    - name: Define pools
      ansible.builtin.command: "virsh pool-define-as {{ item | quote }} dir --target /var/lib/libvirt/images/{{ item | quote }}" # yamllint disable-line
      loop: "{{ pool_list }}"
      register: pdefout
      changed_when: pdefout.rc == 0
      failed_when: "'already exists' not in pdefout.stderr and pdefout.rc != 0"
    - name: Start pools
      ansible.builtin.command: virsh pool-start {{ item | quote }}
      loop: "{{ pool_list }}"
      register: pstartout
      changed_when: pstartout.rc == 0
      failed_when: "'already active' not in pstartout.stderr and pstartout.rc != 0" # yamllint disable-line
    - name: Ensure pools autostarted
      block:
      - name: Get list of autostarted pools
        ansible.builtin.command: virsh pool-list --autostart
        register: pool_autostarts
        changed_when: false
      - name: Mark pool as autostarted
        ansible.builtin.command: virsh pool-autostart {{ item | quote }}
        register: pautoout
        loop: "{{ pool_list }}"
        when: item not in pool_autostarts.stdout
        changed_when: pautoout.rc == 0
...
